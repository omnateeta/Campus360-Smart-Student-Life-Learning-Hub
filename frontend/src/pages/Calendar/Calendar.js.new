import React, { useState, useEffect } from 'react';
import {
  Box,
  Grid,
  Card,
  CardContent,
  Typography,
  Button,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Chip,
  Avatar,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Fab,
  Paper,
  Divider,
  Badge,
  CircularProgress,
} from '@mui/material';
import {
  ChevronLeft,
  ChevronRight,
  Today,
  Add,
  Event,
  Schedule,
  Assignment,
  Timer,
  School,
  CalendarMonth,
  ViewWeek,
  ViewDay,
  FilterList,
} from '@mui/icons-material';
import { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { motion, AnimatePresence } from 'framer-motion';
import { toast } from 'react-toastify';
import {
  format,
  startOfMonth,
  endOfMonth,
  startOfWeek,
  endOfWeek,
  addDays,
  addMonths,
  subMonths,
  isSameMonth,
  isSameDay,
  isToday,
  getDay,
} from 'date-fns';
import { tasksService } from '../../services/tasksService';

const Calendar = () => {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [view, setView] = useState('month');
  const [events, setEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedDate, setSelectedDate] = useState(null);
  const [createEventOpen, setCreateEventOpen] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState(null);
  const [eventDetailsOpen, setEventDetailsOpen] = useState(false);
  const [editEventOpen, setEditEventOpen] = useState(false);
  const [editingEvent, setEditingEvent] = useState(null);
  
  // Google Calendar colors
  const googleColors = {
    primary: '#1a73e8',
    background: '#f8f9fa',
    dayHeader: '#5f6368',
    todayBg: '#e8f0fe',
    todayText: '#1a73e8',
    eventBg: '#e8f0fe',
    eventBorder: '#d2e3fc',
    textPrimary: '#3c4043',
    textSecondary: '#5f6368',
  };
  
  // New event form state
  const [newEvent, setNewEvent] = useState({
    title: '',
    type: 'study',
    subject: '',
    startDateTime: new Date(),
    endDateTime: new Date(),
    description: '',
    location: '',
  });

  // ... rest of your component logic ...

  return (
    <Box sx={{ 
      display: 'flex', 
      flexDirection: 'column',
      p: 3,
      backgroundColor: 'white',
      minHeight: '100vh'
    }}>
      <LocalizationProvider dateAdapter={AdapterDateFns}>
        {/* Calendar header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
            <Typography variant="h5" sx={{ fontWeight: 500 }}>
              {format(currentDate, 'MMMM yyyy')}
            </Typography>
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <IconButton onClick={prevMonth} size="small">
                <ChevronLeft />
              </IconButton>
              <Button 
                variant="outlined" 
                size="small" 
                onClick={goToToday}
                startIcon={<Today />}
                sx={{ mx: 1 }}
              >
                Today
              </Button>
              <IconButton onClick={nextMonth} size="small">
                <ChevronRight />
              </IconButton>
            </Box>
          </Box>
          
          <Button
            variant="contained"
            startIcon={<Add />}
            onClick={() => setCreateEventOpen(true)}
            size="medium"
            sx={{
              backgroundColor: googleColors.primary,
              color: 'white',
              borderRadius: '24px',
              padding: '6px 24px',
              textTransform: 'none',
              fontWeight: 500,
              fontSize: '14px',
              boxShadow: '0 1px 2px 0 rgba(26,115,232,0.3), 0 1px 3px 1px rgba(26,115,232,0.15)',
              '&:hover': {
                backgroundColor: '#1557b0',
                boxShadow: '0 1px 3px 0 rgba(26,115,232,0.3), 0 4px 8px 3px rgba(26,115,232,0.15)'
              }
            }}
          >
            Create
          </Button>
        </Box>

        {/* Calendar view selector */}
        <Box sx={{ mb: 3, display: 'flex', gap: 1 }}>
          <Button
            variant={view === 'month' ? 'contained' : 'outlined'}
            onClick={() => setView('month')}
            size="small"
          >
            Month
          </Button>
          <Button
            variant={view === 'week' ? 'contained' : 'outlined'}
            onClick={() => setView('week')}
            size="small"
          >
            Week
          </Button>
          <Button
            variant={view === 'day' ? 'contained' : 'outlined'}
            onClick={() => setView('day')}
            size="small"
          >
            Day
          </Button>
        </Box>

        {/* Calendar content */}
        {view === 'month' && (
          <Card>
            <CardContent>
              {/* Month view content */}
            </CardContent>
          </Card>
        )}

        {/* Create Event Dialog */}
        <Dialog open={createEventOpen} onClose={() => setCreateEventOpen(false)} maxWidth="sm" fullWidth>
          <DialogTitle>Create New Event</DialogTitle>
          <DialogContent>
            <Box sx={{ mt: 2, display: 'flex', flexDirection: 'column', gap: 2 }}>
              <TextField
                label="Title"
                fullWidth
                variant="outlined"
                value={newEvent.title}
                onChange={(e) => setNewEvent({...newEvent, title: e.target.value})}
              />
              <FormControl fullWidth>
                <InputLabel>Type</InputLabel>
                <Select
                  label="Type"
                  value={newEvent.type}
                  onChange={(e) => setNewEvent({...newEvent, type: e.target.value})}
                >
                  <MenuItem value="study">Study</MenuItem>
                  <MenuItem value="assignment">Assignment</MenuItem>
                  <MenuItem value="exam">Exam</MenuItem>
                </Select>
              </FormControl>
              <LocalizationProvider dateAdapter={AdapterDateFns}>
                <DateTimePicker
                  label="Start Date & Time"
                  value={newEvent.startDateTime}
                  onChange={(newValue) => setNewEvent({...newEvent, startDateTime: newValue})}
                  renderInput={(params) => <TextField {...params} fullWidth />}
                />
                <Box sx={{ mt: 2 }}>
                  <DateTimePicker
                    label="End Date & Time"
                    value={newEvent.endDateTime}
                    onChange={(newValue) => setNewEvent({...newEvent, endDateTime: newValue})}
                    renderInput={(params) => <TextField {...params} fullWidth />}
                  />
                </Box>
              </LocalizationProvider>
              <TextField
                label="Description"
                multiline
                rows={3}
                fullWidth
                variant="outlined"
                value={newEvent.description}
                onChange={(e) => setNewEvent({...newEvent, description: e.target.value})}
              />
              <TextField
                label="Location"
                fullWidth
                variant="outlined"
                value={newEvent.location}
                onChange={(e) => setNewEvent({...newEvent, location: e.target.value})}
              />
            </Box>
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setCreateEventOpen(false)}>
              Cancel
            </Button>
            <Button 
              variant="contained"
              onClick={handleCreateEvent}
              disabled={!newEvent.title.trim() || !newEvent.subject.trim()}
            >
              Create Event
            </Button>
          </DialogActions>
        </Dialog>
      </LocalizationProvider>
    </Box>
  );
};

export default Calendar;
